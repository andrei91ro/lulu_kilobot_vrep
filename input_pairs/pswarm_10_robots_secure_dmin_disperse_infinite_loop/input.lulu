pswarm = {
    global_env = {};
    C = {pi_disperse};

        pi_disperse = {
            A = {l_m, m_0, m_S, m_L, m_R, c_R, c_G, c_B, c_W, d_min, B_all, S_*, B_*, id_*};
            e = e;
            f = f;
            n = 4;
            env = {l_m};
            B = {command, motion, msg_distance, led_rgb};
                command = ({e, e, e, d_min};
                        # request minimum distance from all of the robots near me
                        < e->e, e->e, e->e, d_min<->e >,

                        # if distance is small then randomly chose a new movement direction
                        # check that the robot id is known (id_* in environment)
                        < e->c_G, e->m_S, e<->id_* / e<->e, e<->S_* >, # 50% straight (green led)
                        < e->c_G, e->m_S, e<->id_* / e<->e, e<->S_* >, # 50% straight (green led)
                        < e->c_R, e->m_L, e<->id_* / e<->e, e<->S_* >, # 25% left (red led)
                        < e->c_B, e->m_R, e<->id_* / e<->e, e<->S_* >, # 25% right (blue led)

                        # consume distance big (B_*) objects
                        < e->e, e->e, e->e, e<->B_* >,     # consume step 1
                        < e->e, e->e, e->e, B_*->d_min >,  # consume step 2

                        # consume distance big from all robots (B_all) objects
                        # these are published by msg_distance when the neighbour robot list is empty
                        # i.e no robots are sensed by infrared
                        < e->e, e->e, e->e, e<->B_all >,     # consume step 1
                        < e->e, e->e, e->e, B_all->d_min >,  # consume step 2
                        
                        # consume distance small (S_*) objects from unknown robots (no id_* taken from environment)
                        # reset motion and led_colour commands
                        < c_G->e, m_S->e, e->e, S_*->d_min >,
                        < c_R->e, m_L->e, e->e, S_*->d_min >,
                        < c_B->e, m_R->e, e->e, S_*->d_min >,

                        # publish the new commands (given that the robot id is known)
                        # and return the id to the environment for later use
                        < c_G<->e, m_S<->e, id_*<->e, S_*->d_min >,
                        < c_R<->e, m_L<->e, id_*<->e, S_*->d_min >,
                        < c_B<->e, m_R<->e, id_*<->e, S_*->d_min >,

                        #< c_W<->e, m_0<->e, B_*->e >,
                );

                motion = ({e, e, e, e};
                        # process move stop
                        < e->e, e->e, e->e, e<->m_0 >,
                        < e->e, e->e, e->e, m_0->e>,

                        # process move straight
                        < e->e, e->e, e->e, e<->m_S >,
                        < e->e, e->e, e->e, m_S->e>,

                        # process move left
                        < e->e, e->e, e->e, e<->m_L >,
                        < e->e, e->e, e->e, m_L->e>,

                        # process move right
                        < e->e, e->e, e->e, e<->m_R >,
                        < e->e, e->e, e->e, m_R->e>);

                led_rgb = ({e, e, e, e};
                        # process color white
                        < e->e, e->e, e->e, e<->c_W >,
                        < e->e, e->e, e->e, c_W->e>,

                        # process color green
                        < e->e, e->e, e->e, e<->c_G >,
                        < e->e, e->e, e->e, c_G->e>,

                        # process color red
                        < e->e, e->e, e->e, e<->c_R >,
                        < e->e, e->e, e->e, c_R->e>,

                        # process color blue
                        < e->e, e->e, e->e, e<->c_B >,
                        < e->e, e->e, e->e, c_B->e>);

                msg_distance = ({e, e, e, e};
                        # process distance request
                        # d_min return the minimum distance from all of the neighbour robots
                        < e->e, e->e, e->e, e<->d_min >,
                        < e->e, e->e, e->e, S_*<->e >,
                        < e->e, e->e, e->e, B_*<->e >,
                        < e->e, e->e, e->e, B_all<->e >, # published when there are no robots within infrared range
                );
        };

}
